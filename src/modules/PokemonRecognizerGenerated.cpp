#include <vector>

#include <opencv2/opencv.hpp>

#include "PokemonRecognizer.h"

	"0091", "0094", "0128", "0149",  "0184", "0248", "0423", "0445",
	"0450", "0462", "0475", "0479W", "0612", "0635", "0706", "0750",
	"0778", "0823", "0858", "0861",  "0887", "0908", "0911", "0914",
	"0925", "0927", "0931", "0951",  "0956", "0967", "0977", "0983",
	"0992", "0994", "0997", "1002",  "1004", "1010",
};
static const std::vector<std::vector<uchar>> DATA = {
	{
		16, 109, 8, 86,  8, 22, 20, 119, 16, 109, 0,  102,
		1,  128, 0, 119, 8, 38, 72, 30,  0,  102, 12, 54,
	},
	{
		52,
		229,
		0,
		102,
		4,
		54,
		72,
		86,
		147,
		192,
	},
	{
		10, 82, 49, 77, 72,  118, 72, 54, 16, 38,
		24, 6,  26, 66, 150, 18,  73, 54, 16, 78,
	},
	{
		24, 30, 4,  38, 8,  38,  221, 182, 4,  38,  1,  132,
		19, 0,  16, 22, 93, 148, 17,  132, 48, 222, 73, 22,
		16, 54, 17, 68, 91, 0,   97,  253, 20, 38,  93, 150,
	},
	{
		8,  22,  88, 118, 17, 4,   16,  69,  8,  86,
		21, 4,   8,  118, 89, 95,  89,  62,  88, 126,
		18, 220, 22, 132, 81, 196, 179, 201, 77, 182,
	},
	{
		148, 38,  8,  22,  8,  38,  8,  38,  16, 100, 8,   18,
		1,   132, 24, 22,  65, 132, 40, 111, 89, 132, 16,  118,
		73,  236, 44, 103, 24, 86,  20, 87,  61, 15,  203, 224,
		24,  78,  16, 22,  65, 244, 17, 68,  5,  132, 89,  22,
	},
	{
		0,  34,  36, 237, 8,  86, 8,   18,  8,  86,
		16, 100, 8,  54,  72, 95, 108, 255, 72, 119,
		8,  74,  9,  14,  8,  78, 8,   87,  72, 246,
	},
	{
		0,  38, 16,  68, 56,  127, 28,  22, 181, 172, 24, 54, 26,
		86, 72, 118, 93, 148, 72,  118, 21, 4,   8,   22, 89, 182,
	},
	{
		8,
		22,
		62,
		30,
		44,
		39,
		8,
		38,
		5,
		165,
		40,
		79,
		73,
		102,
		47,
		9,
	},
	{
		52,  205, 72,  123, 17,  69,  62, 95,  152, 54,
		52,  39,  150, 54,  81,  196, 1,  108, 72,  90,
		202, 114, 146, 22,  146, 82,  29, 6,   56,  30,
	},
	{
		88, 30,  20, 23, 24, 22, 0, 102, 9,   6, 24, 22,  125, 95,
		16, 182, 0,  38, 8,  34, 1, 36,  146, 6, 0,  108, 73,  6,
	},
	{
		24,
		22,
		18,
		22,
		4,
		39,
		24,
		22,
		0,
		38,
		16,
		38,
		89,
		22,
		20,
		38,
	},
	{
		8,  66, 0,   68, 0,   38, 16, 87, 36, 127, 26,
		95, 36, 119, 90, 214, 12, 87, 8,  94, 21,  4,
	},
	{
		20, 103, 8, 30, 218, 82, 72, 86, 16, 68, 33, 77, 8,
		54, 9,   6, 72, 54,  24, 22, 24, 70, 24, 70, 88, 54,
	},
	{
		0,
		102,
		89,
		150,
		8,
		102,
		4,
		38,
		40,
		75,
		16,
		36,
		40,
		26,
		36,
		39,
		9,
		100,
	},
	{
		24,
		30,
		8,
		30,
		16,
		38,
		8,
		86,
		0,
		110,
		150,
		22,
		24,
		22,
		26,
		22,
		4,
		38,
	},
	{
		4,   165, 93, 182, 54, 133, 105, 76,  217, 253, 26, 6,  73,
		247, 144, 54, 0,   36, 16,  38,  144, 110, 152, 54, 73, 253,
	},
	{
		20,
		38,
		8,
		90,
		8,
		22,
		26,
		22,
		26,
		86,
		16,
		38,
		26,
		22,
		146,
		22,
	},
	{
		26, 22, 24, 22, 8,  86, 52, 79, 44, 79,  56, 111,
		8,  78, 24, 94, 56, 78, 28, 22, 73, 100, 16, 214,
	},
	{
		148,
		103,
		138,
		18,
		90,
		30,
		8,
		22,
		4,
		54,
		0,
		102,
		24,
		94,
		73,
		22,
		37,
		140,
	},
	{
		22, 23, 8,  22,  124, 30, 0,  237, 88,  127, 16,
		76, 32, 78, 108, 255, 24, 87, 128, 233, 22,  22,
	},
	{
		0,  38,  89, 150, 24, 86, 16, 76,  8,  118, 200, 182, 77, 50,
		8,  22,  84, 148, 19, 68, 89, 132, 76, 182, 4,   133, 84, 148,
		69, 148, 95, 150, 18, 4,  16, 4,   72, 182, 72,  22,
	},
	{
		146,
		86,
		4,
		35,
		26,
		22,
		168,
		58,
		52,
		47,
		218,
		95,
		0,
		36,
		40,
		111,
	},
	{
		0,   108, 1,   4,   88, 150, 8,  38, 150, 2,  0,
		102, 72,  86,  12,  54, 88,  22, 12, 23,  89, 36,
		0,   114, 16,  38,  0,  54,  88, 22, 12,  54, 30,
		22,  32,  237, 164, 43, 52,  79, 92, 22,  88, 150,
	},
	{
		146, 50,  8,  86,  16, 102, 52, 111, 52, 31,
		20,  87,  73, 127, 91, 193, 16, 86,  8,  103,
		0,   182, 8,  127, 0,  127, 65, 180, 76, 54,
	},
	{
		8,  30,  88, 94,  93, 22,  18, 22, 0,  110, 16, 180, 60, 22,
		92, 182, 84, 182, 65, 164, 24, 22, 41, 12,  69, 181, 12, 38,
		73, 104, 89, 70,  56, 95,  28, 38, 28, 6,   8,  46,
	},
	{
		8,
		38,
		130,
		34,
		24,
		30,
		60,
		14,
		8,
		22,
		72,
		22,
		4,
		54,
		4,
		54,
		24,
		6,
	},
	{
		144, 102, 8,  22,  138, 18, 16,  102, 24, 22, 22, 6,  56,
		95,  52,  22, 73,  236, 73, 164, 48,  78, 38, 26, 89, 204,
		0,   78,  81, 204, 22,  22, 8,   38,  8,  54, 16, 4,
	},
	{
		0,  101, 24, 22, 16, 100, 0,  38, 72,  22, 8,   22, 20, 38, 8,
		86, 8,   86, 40, 78, 40,  79, 20, 119, 8,  110, 8,  38, 80, 150,
	},
	{
		16,
		22,
		18,
		22,
		24,
		22,
		8,
		38,
		24,
		6,
		16,
		36,
	},
	{
		8,  22,  24, 22,  88, 182, 8, 86,  16, 132,
		18, 4,   0,  100, 0,  247, 9, 8,   48, 79,
		49, 205, 65, 196, 16, 70,  0, 119, 65, 196,
	},
	{
		125, 95, 0,  107, 52, 37, 0,  102, 120, 255, 20, 38,
		4,   38, 16, 22,  52, 14, 18, 22,  150, 18,  0,  38,
	},
	{
		52, 101, 4,  39,  16,  38, 180, 229, 0,   109, 154, 22, 120,
		95, 1,   68, 154, 22,  90, 86,  17,  68,  56,  78,  0,  102,
		72, 54,  73, 246, 130, 32, 19,  132, 138, 34,  8,   22,
	},
	{
		40, 42,  120, 95,  8,   110, 52, 229, 104, 95,
		0,  119, 128, 107, 182, 19,  16, 78,  88,  86,
	},
	{
		0,  38, 16, 100, 16,  38, 0,   100, 20, 38, 20, 36, 60, 23, 8,
		22, 40, 62, 17,  132, 17, 164, 8,   22, 8,  54, 8,  54, 0,  38,
	},
	{
		8,  118, 88,  54, 20, 22,  144, 102, 16, 4,
		73, 22,  154, 74, 26, 94,  138, 10,  44, 79,
		26, 74,  90,  94, 36, 111, 190, 27,  16, 4,
	},
	{
		8,  54,  0,   34,  88,  22,  16, 38, 8,  86, 72,  54, 8,
		86, 84,  180, 188, 38,  138, 18, 36, 38, 90, 22,  23, 4,
		20, 180, 190, 22,  9,   12,  92, 22, 0,  68, 8,   62, 1,
		4,  88,  22,  77,  180, 24,  86, 24, 22, 16, 103,
	},
	{
		88, 127, 1,  36, 20, 39, 146, 103, 0, 38, 72,  94, 16, 68, 16,
		38, 132, 38, 56, 78, 16, 71,  4,   4, 88, 246, 56, 79, 0,  6,
	},
};
const std::vector<cv::Mat> PokemonRecognizer::POKEMON_DESCRIPTORS = {
	cv::Mat(static_cast<int>(DATA[0].size()) / 2, 2, CV_8U,
		(void *)DATA[0].data()),
	cv::Mat(static_cast<int>(DATA[1].size()) / 2, 2, CV_8U,
		(void *)DATA[1].data()),
	cv::Mat(static_cast<int>(DATA[2].size()) / 2, 2, CV_8U,
		(void *)DATA[2].data()),
	cv::Mat(static_cast<int>(DATA[3].size()) / 2, 2, CV_8U,
		(void *)DATA[3].data()),
	cv::Mat(static_cast<int>(DATA[4].size()) / 2, 2, CV_8U,
		(void *)DATA[4].data()),
	cv::Mat(static_cast<int>(DATA[5].size()) / 2, 2, CV_8U,
		(void *)DATA[5].data()),
	cv::Mat(static_cast<int>(DATA[6].size()) / 2, 2, CV_8U,
		(void *)DATA[6].data()),
	cv::Mat(static_cast<int>(DATA[7].size()) / 2, 2, CV_8U,
		(void *)DATA[7].data()),
	cv::Mat(static_cast<int>(DATA[8].size()) / 2, 2, CV_8U,
		(void *)DATA[8].data()),
	cv::Mat(static_cast<int>(DATA[9].size()) / 2, 2, CV_8U,
		(void *)DATA[9].data()),
	cv::Mat(static_cast<int>(DATA[10].size()) / 2, 2, CV_8U,
		(void *)DATA[10].data()),
	cv::Mat(static_cast<int>(DATA[11].size()) / 2, 2, CV_8U,
		(void *)DATA[11].data()),
	cv::Mat(static_cast<int>(DATA[12].size()) / 2, 2, CV_8U,
		(void *)DATA[12].data()),
	cv::Mat(static_cast<int>(DATA[13].size()) / 2, 2, CV_8U,
		(void *)DATA[13].data()),
	cv::Mat(static_cast<int>(DATA[14].size()) / 2, 2, CV_8U,
		(void *)DATA[14].data()),
	cv::Mat(static_cast<int>(DATA[15].size()) / 2, 2, CV_8U,
		(void *)DATA[15].data()),
	cv::Mat(static_cast<int>(DATA[16].size()) / 2, 2, CV_8U,
		(void *)DATA[16].data()),
	cv::Mat(static_cast<int>(DATA[17].size()) / 2, 2, CV_8U,
		(void *)DATA[17].data()),
	cv::Mat(static_cast<int>(DATA[18].size()) / 2, 2, CV_8U,
		(void *)DATA[18].data()),
	cv::Mat(static_cast<int>(DATA[19].size()) / 2, 2, CV_8U,
		(void *)DATA[19].data()),
	cv::Mat(static_cast<int>(DATA[20].size()) / 2, 2, CV_8U,
		(void *)DATA[20].data()),
	cv::Mat(static_cast<int>(DATA[21].size()) / 2, 2, CV_8U,
		(void *)DATA[21].data()),
	cv::Mat(static_cast<int>(DATA[22].size()) / 2, 2, CV_8U,
		(void *)DATA[22].data()),
	cv::Mat(static_cast<int>(DATA[23].size()) / 2, 2, CV_8U,
		(void *)DATA[23].data()),
	cv::Mat(static_cast<int>(DATA[24].size()) / 2, 2, CV_8U,
		(void *)DATA[24].data()),
	cv::Mat(static_cast<int>(DATA[25].size()) / 2, 2, CV_8U,
		(void *)DATA[25].data()),
	cv::Mat(static_cast<int>(DATA[26].size()) / 2, 2, CV_8U,
		(void *)DATA[26].data()),
	cv::Mat(static_cast<int>(DATA[27].size()) / 2, 2, CV_8U,
		(void *)DATA[27].data()),
	cv::Mat(static_cast<int>(DATA[28].size()) / 2, 2, CV_8U,
		(void *)DATA[28].data()),
	cv::Mat(static_cast<int>(DATA[29].size()) / 2, 2, CV_8U,
		(void *)DATA[29].data()),
	cv::Mat(static_cast<int>(DATA[30].size()) / 2, 2, CV_8U,
		(void *)DATA[30].data()),
	cv::Mat(static_cast<int>(DATA[31].size()) / 2, 2, CV_8U,
		(void *)DATA[31].data()),
	cv::Mat(static_cast<int>(DATA[32].size()) / 2, 2, CV_8U,
		(void *)DATA[32].data()),
	cv::Mat(static_cast<int>(DATA[33].size()) / 2, 2, CV_8U,
		(void *)DATA[33].data()),
	cv::Mat(static_cast<int>(DATA[34].size()) / 2, 2, CV_8U,
		(void *)DATA[34].data()),
	cv::Mat(static_cast<int>(DATA[35].size()) / 2, 2, CV_8U,
		(void *)DATA[35].data()),
	cv::Mat(static_cast<int>(DATA[36].size()) / 2, 2, CV_8U,
		(void *)DATA[36].data()),
	cv::Mat(static_cast<int>(DATA[37].size()) / 2, 2, CV_8U,
		(void *)DATA[37].data()),
};
