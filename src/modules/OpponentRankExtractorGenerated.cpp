#include <vector>
#include <map>
#include <string>
#include <utility>
#include <opencv2/opencv.hpp>
#include "OpponentRankExtractor.h"

static std::vector<std::vector<uchar>> TEXT_DATA = {

	{0},

	{0},

	{255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   255,
	 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
	 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   255, 255, 255,
	 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255,
	 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,
	 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,
	 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,
	 0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,
	 0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,
	 0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255,
	 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
	 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255,
	 0,   0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,
	 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,
	 0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,
	 0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,
	 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
	 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255,
	 0,   0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,
	 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,
	 0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,
	 0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255,
	 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255,
	 255, 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,
	 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,
	 0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,
	 0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   255, 255,
	 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255,
	 255, 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,
	 0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,
	 0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   0},

	{0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,
	 0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   255,
	 255, 255, 255, 255, 0,   0,   0,   0,   0,   255, 255, 255, 255, 255,
	 0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,   0,
	 0,   0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   255, 255,
	 255, 255, 255, 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,
	 0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,   0,
	 0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   255, 255,
	 255, 255, 255, 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 255,
	 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,
	 0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,
	 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255,
	 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,
	 0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,
	 0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255,
	 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255,
	 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,
	 0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,
	 0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255, 255,
	 255, 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 255,
	 0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,
	 0,   0,   0,   0,   255, 255, 255, 255, 0,   0,   0,   0,   0,   0,
	 0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255,
	 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255,
	 255, 0,   0,   0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,
	 0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,   0,
	 0,   0,   0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,
	 0,   255, 255, 255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   255,
	 255, 255, 255, 255},

};

static const std::vector<int> TEXT_COLS = {

	1,

	1,

	12,

	11,

};

const std::map<std::string, std::pair<int, int>>
	OpponentRankExtractor::PAREN_MAP = {

		{"ja", {3, 2}},

};

const std::vector<cv::Mat> OpponentRankExtractor::PAREN_TEMPLATES = {

	cv::Mat(static_cast<int>(TEXT_DATA[0].size()) / TEXT_COLS[0],
		TEXT_COLS[0], CV_8U, TEXT_DATA[0].data()),

	cv::Mat(static_cast<int>(TEXT_DATA[1].size()) / TEXT_COLS[1],
		TEXT_COLS[1], CV_8U, TEXT_DATA[1].data()),

	cv::Mat(static_cast<int>(TEXT_DATA[2].size()) / TEXT_COLS[2],
		TEXT_COLS[2], CV_8U, TEXT_DATA[2].data()),

	cv::Mat(static_cast<int>(TEXT_DATA[3].size()) / TEXT_COLS[3],
		TEXT_COLS[3], CV_8U, TEXT_DATA[3].data()),

};
